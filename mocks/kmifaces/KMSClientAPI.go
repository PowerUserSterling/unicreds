// Code generated by mockery v1.0.0. DO NOT EDIT.

package kmsiface

import (
	kms "github.com/aws/aws-sdk-go-v2/service/kms"
	mock "github.com/stretchr/testify/mock"
)

// MockClientAPI is an autogenerated mock type for the ClientAPI type
type MockClientAPI struct {
	mock.Mock
}

// CancelKeyDeletionRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CancelKeyDeletionRequest(_a0 *kms.CancelKeyDeletionInput) kms.CancelKeyDeletionRequest {
	ret := _m.Called(_a0)

	var r0 kms.CancelKeyDeletionRequest
	if rf, ok := ret.Get(0).(func(*kms.CancelKeyDeletionInput) kms.CancelKeyDeletionRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.CancelKeyDeletionRequest)
	}

	return r0
}

// ConnectCustomKeyStoreRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ConnectCustomKeyStoreRequest(_a0 *kms.ConnectCustomKeyStoreInput) kms.ConnectCustomKeyStoreRequest {
	ret := _m.Called(_a0)

	var r0 kms.ConnectCustomKeyStoreRequest
	if rf, ok := ret.Get(0).(func(*kms.ConnectCustomKeyStoreInput) kms.ConnectCustomKeyStoreRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ConnectCustomKeyStoreRequest)
	}

	return r0
}

// CreateAliasRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateAliasRequest(_a0 *kms.CreateAliasInput) kms.CreateAliasRequest {
	ret := _m.Called(_a0)

	var r0 kms.CreateAliasRequest
	if rf, ok := ret.Get(0).(func(*kms.CreateAliasInput) kms.CreateAliasRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.CreateAliasRequest)
	}

	return r0
}

// CreateCustomKeyStoreRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateCustomKeyStoreRequest(_a0 *kms.CreateCustomKeyStoreInput) kms.CreateCustomKeyStoreRequest {
	ret := _m.Called(_a0)

	var r0 kms.CreateCustomKeyStoreRequest
	if rf, ok := ret.Get(0).(func(*kms.CreateCustomKeyStoreInput) kms.CreateCustomKeyStoreRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.CreateCustomKeyStoreRequest)
	}

	return r0
}

// CreateGrantRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateGrantRequest(_a0 *kms.CreateGrantInput) kms.CreateGrantRequest {
	ret := _m.Called(_a0)

	var r0 kms.CreateGrantRequest
	if rf, ok := ret.Get(0).(func(*kms.CreateGrantInput) kms.CreateGrantRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.CreateGrantRequest)
	}

	return r0
}

// CreateKeyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateKeyRequest(_a0 *kms.CreateKeyInput) kms.CreateKeyRequest {
	ret := _m.Called(_a0)

	var r0 kms.CreateKeyRequest
	if rf, ok := ret.Get(0).(func(*kms.CreateKeyInput) kms.CreateKeyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.CreateKeyRequest)
	}

	return r0
}

// DecryptRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DecryptRequest(_a0 *kms.DecryptInput) kms.DecryptRequest {
	ret := _m.Called(_a0)

	var r0 kms.DecryptRequest
	if rf, ok := ret.Get(0).(func(*kms.DecryptInput) kms.DecryptRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DecryptRequest)
	}

	return r0
}

// DeleteAliasRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DeleteAliasRequest(_a0 *kms.DeleteAliasInput) kms.DeleteAliasRequest {
	ret := _m.Called(_a0)

	var r0 kms.DeleteAliasRequest
	if rf, ok := ret.Get(0).(func(*kms.DeleteAliasInput) kms.DeleteAliasRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DeleteAliasRequest)
	}

	return r0
}

// DeleteCustomKeyStoreRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DeleteCustomKeyStoreRequest(_a0 *kms.DeleteCustomKeyStoreInput) kms.DeleteCustomKeyStoreRequest {
	ret := _m.Called(_a0)

	var r0 kms.DeleteCustomKeyStoreRequest
	if rf, ok := ret.Get(0).(func(*kms.DeleteCustomKeyStoreInput) kms.DeleteCustomKeyStoreRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DeleteCustomKeyStoreRequest)
	}

	return r0
}

// DeleteImportedKeyMaterialRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DeleteImportedKeyMaterialRequest(_a0 *kms.DeleteImportedKeyMaterialInput) kms.DeleteImportedKeyMaterialRequest {
	ret := _m.Called(_a0)

	var r0 kms.DeleteImportedKeyMaterialRequest
	if rf, ok := ret.Get(0).(func(*kms.DeleteImportedKeyMaterialInput) kms.DeleteImportedKeyMaterialRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DeleteImportedKeyMaterialRequest)
	}

	return r0
}

// DescribeCustomKeyStoresRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeCustomKeyStoresRequest(_a0 *kms.DescribeCustomKeyStoresInput) kms.DescribeCustomKeyStoresRequest {
	ret := _m.Called(_a0)

	var r0 kms.DescribeCustomKeyStoresRequest
	if rf, ok := ret.Get(0).(func(*kms.DescribeCustomKeyStoresInput) kms.DescribeCustomKeyStoresRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DescribeCustomKeyStoresRequest)
	}

	return r0
}

// DescribeKeyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeKeyRequest(_a0 *kms.DescribeKeyInput) kms.DescribeKeyRequest {
	ret := _m.Called(_a0)

	var r0 kms.DescribeKeyRequest
	if rf, ok := ret.Get(0).(func(*kms.DescribeKeyInput) kms.DescribeKeyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DescribeKeyRequest)
	}

	return r0
}

// DisableKeyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DisableKeyRequest(_a0 *kms.DisableKeyInput) kms.DisableKeyRequest {
	ret := _m.Called(_a0)

	var r0 kms.DisableKeyRequest
	if rf, ok := ret.Get(0).(func(*kms.DisableKeyInput) kms.DisableKeyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DisableKeyRequest)
	}

	return r0
}

// DisableKeyRotationRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DisableKeyRotationRequest(_a0 *kms.DisableKeyRotationInput) kms.DisableKeyRotationRequest {
	ret := _m.Called(_a0)

	var r0 kms.DisableKeyRotationRequest
	if rf, ok := ret.Get(0).(func(*kms.DisableKeyRotationInput) kms.DisableKeyRotationRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DisableKeyRotationRequest)
	}

	return r0
}

// DisconnectCustomKeyStoreRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DisconnectCustomKeyStoreRequest(_a0 *kms.DisconnectCustomKeyStoreInput) kms.DisconnectCustomKeyStoreRequest {
	ret := _m.Called(_a0)

	var r0 kms.DisconnectCustomKeyStoreRequest
	if rf, ok := ret.Get(0).(func(*kms.DisconnectCustomKeyStoreInput) kms.DisconnectCustomKeyStoreRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.DisconnectCustomKeyStoreRequest)
	}

	return r0
}

// EnableKeyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) EnableKeyRequest(_a0 *kms.EnableKeyInput) kms.EnableKeyRequest {
	ret := _m.Called(_a0)

	var r0 kms.EnableKeyRequest
	if rf, ok := ret.Get(0).(func(*kms.EnableKeyInput) kms.EnableKeyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.EnableKeyRequest)
	}

	return r0
}

// EnableKeyRotationRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) EnableKeyRotationRequest(_a0 *kms.EnableKeyRotationInput) kms.EnableKeyRotationRequest {
	ret := _m.Called(_a0)

	var r0 kms.EnableKeyRotationRequest
	if rf, ok := ret.Get(0).(func(*kms.EnableKeyRotationInput) kms.EnableKeyRotationRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.EnableKeyRotationRequest)
	}

	return r0
}

// EncryptRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) EncryptRequest(_a0 *kms.EncryptInput) kms.EncryptRequest {
	ret := _m.Called(_a0)

	var r0 kms.EncryptRequest
	if rf, ok := ret.Get(0).(func(*kms.EncryptInput) kms.EncryptRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.EncryptRequest)
	}

	return r0
}

// GenerateDataKeyPairRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GenerateDataKeyPairRequest(_a0 *kms.GenerateDataKeyPairInput) kms.GenerateDataKeyPairRequest {
	ret := _m.Called(_a0)

	var r0 kms.GenerateDataKeyPairRequest
	if rf, ok := ret.Get(0).(func(*kms.GenerateDataKeyPairInput) kms.GenerateDataKeyPairRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GenerateDataKeyPairRequest)
	}

	return r0
}

// GenerateDataKeyPairWithoutPlaintextRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GenerateDataKeyPairWithoutPlaintextRequest(_a0 *kms.GenerateDataKeyPairWithoutPlaintextInput) kms.GenerateDataKeyPairWithoutPlaintextRequest {
	ret := _m.Called(_a0)

	var r0 kms.GenerateDataKeyPairWithoutPlaintextRequest
	if rf, ok := ret.Get(0).(func(*kms.GenerateDataKeyPairWithoutPlaintextInput) kms.GenerateDataKeyPairWithoutPlaintextRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GenerateDataKeyPairWithoutPlaintextRequest)
	}

	return r0
}

// GenerateDataKeyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GenerateDataKeyRequest(_a0 *kms.GenerateDataKeyInput) kms.GenerateDataKeyRequest {
	ret := _m.Called(_a0)

	var r0 kms.GenerateDataKeyRequest
	if rf, ok := ret.Get(0).(func(*kms.GenerateDataKeyInput) kms.GenerateDataKeyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GenerateDataKeyRequest)
	}

	return r0
}

// GenerateDataKeyWithoutPlaintextRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GenerateDataKeyWithoutPlaintextRequest(_a0 *kms.GenerateDataKeyWithoutPlaintextInput) kms.GenerateDataKeyWithoutPlaintextRequest {
	ret := _m.Called(_a0)

	var r0 kms.GenerateDataKeyWithoutPlaintextRequest
	if rf, ok := ret.Get(0).(func(*kms.GenerateDataKeyWithoutPlaintextInput) kms.GenerateDataKeyWithoutPlaintextRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GenerateDataKeyWithoutPlaintextRequest)
	}

	return r0
}

// GenerateRandomRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GenerateRandomRequest(_a0 *kms.GenerateRandomInput) kms.GenerateRandomRequest {
	ret := _m.Called(_a0)

	var r0 kms.GenerateRandomRequest
	if rf, ok := ret.Get(0).(func(*kms.GenerateRandomInput) kms.GenerateRandomRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GenerateRandomRequest)
	}

	return r0
}

// GetKeyPolicyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GetKeyPolicyRequest(_a0 *kms.GetKeyPolicyInput) kms.GetKeyPolicyRequest {
	ret := _m.Called(_a0)

	var r0 kms.GetKeyPolicyRequest
	if rf, ok := ret.Get(0).(func(*kms.GetKeyPolicyInput) kms.GetKeyPolicyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GetKeyPolicyRequest)
	}

	return r0
}

// GetKeyRotationStatusRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GetKeyRotationStatusRequest(_a0 *kms.GetKeyRotationStatusInput) kms.GetKeyRotationStatusRequest {
	ret := _m.Called(_a0)

	var r0 kms.GetKeyRotationStatusRequest
	if rf, ok := ret.Get(0).(func(*kms.GetKeyRotationStatusInput) kms.GetKeyRotationStatusRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GetKeyRotationStatusRequest)
	}

	return r0
}

// GetParametersForImportRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GetParametersForImportRequest(_a0 *kms.GetParametersForImportInput) kms.GetParametersForImportRequest {
	ret := _m.Called(_a0)

	var r0 kms.GetParametersForImportRequest
	if rf, ok := ret.Get(0).(func(*kms.GetParametersForImportInput) kms.GetParametersForImportRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GetParametersForImportRequest)
	}

	return r0
}

// GetPublicKeyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GetPublicKeyRequest(_a0 *kms.GetPublicKeyInput) kms.GetPublicKeyRequest {
	ret := _m.Called(_a0)

	var r0 kms.GetPublicKeyRequest
	if rf, ok := ret.Get(0).(func(*kms.GetPublicKeyInput) kms.GetPublicKeyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.GetPublicKeyRequest)
	}

	return r0
}

// ImportKeyMaterialRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ImportKeyMaterialRequest(_a0 *kms.ImportKeyMaterialInput) kms.ImportKeyMaterialRequest {
	ret := _m.Called(_a0)

	var r0 kms.ImportKeyMaterialRequest
	if rf, ok := ret.Get(0).(func(*kms.ImportKeyMaterialInput) kms.ImportKeyMaterialRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ImportKeyMaterialRequest)
	}

	return r0
}

// ListAliasesRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListAliasesRequest(_a0 *kms.ListAliasesInput) kms.ListAliasesRequest {
	ret := _m.Called(_a0)

	var r0 kms.ListAliasesRequest
	if rf, ok := ret.Get(0).(func(*kms.ListAliasesInput) kms.ListAliasesRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ListAliasesRequest)
	}

	return r0
}

// ListGrantsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListGrantsRequest(_a0 *kms.ListGrantsInput) kms.ListGrantsRequest {
	ret := _m.Called(_a0)

	var r0 kms.ListGrantsRequest
	if rf, ok := ret.Get(0).(func(*kms.ListGrantsInput) kms.ListGrantsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ListGrantsRequest)
	}

	return r0
}

// ListKeyPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListKeyPoliciesRequest(_a0 *kms.ListKeyPoliciesInput) kms.ListKeyPoliciesRequest {
	ret := _m.Called(_a0)

	var r0 kms.ListKeyPoliciesRequest
	if rf, ok := ret.Get(0).(func(*kms.ListKeyPoliciesInput) kms.ListKeyPoliciesRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ListKeyPoliciesRequest)
	}

	return r0
}

// ListKeysRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListKeysRequest(_a0 *kms.ListKeysInput) kms.ListKeysRequest {
	ret := _m.Called(_a0)

	var r0 kms.ListKeysRequest
	if rf, ok := ret.Get(0).(func(*kms.ListKeysInput) kms.ListKeysRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ListKeysRequest)
	}

	return r0
}

// ListResourceTagsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListResourceTagsRequest(_a0 *kms.ListResourceTagsInput) kms.ListResourceTagsRequest {
	ret := _m.Called(_a0)

	var r0 kms.ListResourceTagsRequest
	if rf, ok := ret.Get(0).(func(*kms.ListResourceTagsInput) kms.ListResourceTagsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ListResourceTagsRequest)
	}

	return r0
}

// ListRetirableGrantsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListRetirableGrantsRequest(_a0 *kms.ListRetirableGrantsInput) kms.ListRetirableGrantsRequest {
	ret := _m.Called(_a0)

	var r0 kms.ListRetirableGrantsRequest
	if rf, ok := ret.Get(0).(func(*kms.ListRetirableGrantsInput) kms.ListRetirableGrantsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ListRetirableGrantsRequest)
	}

	return r0
}

// PutKeyPolicyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) PutKeyPolicyRequest(_a0 *kms.PutKeyPolicyInput) kms.PutKeyPolicyRequest {
	ret := _m.Called(_a0)

	var r0 kms.PutKeyPolicyRequest
	if rf, ok := ret.Get(0).(func(*kms.PutKeyPolicyInput) kms.PutKeyPolicyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.PutKeyPolicyRequest)
	}

	return r0
}

// ReEncryptRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ReEncryptRequest(_a0 *kms.ReEncryptInput) kms.ReEncryptRequest {
	ret := _m.Called(_a0)

	var r0 kms.ReEncryptRequest
	if rf, ok := ret.Get(0).(func(*kms.ReEncryptInput) kms.ReEncryptRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ReEncryptRequest)
	}

	return r0
}

// RetireGrantRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) RetireGrantRequest(_a0 *kms.RetireGrantInput) kms.RetireGrantRequest {
	ret := _m.Called(_a0)

	var r0 kms.RetireGrantRequest
	if rf, ok := ret.Get(0).(func(*kms.RetireGrantInput) kms.RetireGrantRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.RetireGrantRequest)
	}

	return r0
}

// RevokeGrantRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) RevokeGrantRequest(_a0 *kms.RevokeGrantInput) kms.RevokeGrantRequest {
	ret := _m.Called(_a0)

	var r0 kms.RevokeGrantRequest
	if rf, ok := ret.Get(0).(func(*kms.RevokeGrantInput) kms.RevokeGrantRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.RevokeGrantRequest)
	}

	return r0
}

// ScheduleKeyDeletionRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ScheduleKeyDeletionRequest(_a0 *kms.ScheduleKeyDeletionInput) kms.ScheduleKeyDeletionRequest {
	ret := _m.Called(_a0)

	var r0 kms.ScheduleKeyDeletionRequest
	if rf, ok := ret.Get(0).(func(*kms.ScheduleKeyDeletionInput) kms.ScheduleKeyDeletionRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.ScheduleKeyDeletionRequest)
	}

	return r0
}

// SignRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) SignRequest(_a0 *kms.SignInput) kms.SignRequest {
	ret := _m.Called(_a0)

	var r0 kms.SignRequest
	if rf, ok := ret.Get(0).(func(*kms.SignInput) kms.SignRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.SignRequest)
	}

	return r0
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) TagResourceRequest(_a0 *kms.TagResourceInput) kms.TagResourceRequest {
	ret := _m.Called(_a0)

	var r0 kms.TagResourceRequest
	if rf, ok := ret.Get(0).(func(*kms.TagResourceInput) kms.TagResourceRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.TagResourceRequest)
	}

	return r0
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UntagResourceRequest(_a0 *kms.UntagResourceInput) kms.UntagResourceRequest {
	ret := _m.Called(_a0)

	var r0 kms.UntagResourceRequest
	if rf, ok := ret.Get(0).(func(*kms.UntagResourceInput) kms.UntagResourceRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.UntagResourceRequest)
	}

	return r0
}

// UpdateAliasRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateAliasRequest(_a0 *kms.UpdateAliasInput) kms.UpdateAliasRequest {
	ret := _m.Called(_a0)

	var r0 kms.UpdateAliasRequest
	if rf, ok := ret.Get(0).(func(*kms.UpdateAliasInput) kms.UpdateAliasRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.UpdateAliasRequest)
	}

	return r0
}

// UpdateCustomKeyStoreRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateCustomKeyStoreRequest(_a0 *kms.UpdateCustomKeyStoreInput) kms.UpdateCustomKeyStoreRequest {
	ret := _m.Called(_a0)

	var r0 kms.UpdateCustomKeyStoreRequest
	if rf, ok := ret.Get(0).(func(*kms.UpdateCustomKeyStoreInput) kms.UpdateCustomKeyStoreRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.UpdateCustomKeyStoreRequest)
	}

	return r0
}

// UpdateKeyDescriptionRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateKeyDescriptionRequest(_a0 *kms.UpdateKeyDescriptionInput) kms.UpdateKeyDescriptionRequest {
	ret := _m.Called(_a0)

	var r0 kms.UpdateKeyDescriptionRequest
	if rf, ok := ret.Get(0).(func(*kms.UpdateKeyDescriptionInput) kms.UpdateKeyDescriptionRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.UpdateKeyDescriptionRequest)
	}

	return r0
}

// VerifyRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) VerifyRequest(_a0 *kms.VerifyInput) kms.VerifyRequest {
	ret := _m.Called(_a0)

	var r0 kms.VerifyRequest
	if rf, ok := ret.Get(0).(func(*kms.VerifyInput) kms.VerifyRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(kms.VerifyRequest)
	}

	return r0
}
