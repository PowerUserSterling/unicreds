// Code generated by mockery v1.0.0. DO NOT EDIT.

package dynamodbiface

import (
	context "context"

	aws "github.com/aws/aws-sdk-go-v2/aws"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"

	mock "github.com/stretchr/testify/mock"
)

// MockClientAPI is an autogenerated mock type for the ClientAPI type
type MockClientAPI struct {
	mock.Mock
}

// BatchGetItemRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) BatchGetItemRequest(_a0 *dynamodb.BatchGetItemInput) dynamodb.BatchGetItemRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.BatchGetItemRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchGetItemInput) dynamodb.BatchGetItemRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.BatchGetItemRequest)
	}

	return r0
}

// BatchWriteItemRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) BatchWriteItemRequest(_a0 *dynamodb.BatchWriteItemInput) dynamodb.BatchWriteItemRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.BatchWriteItemRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchWriteItemInput) dynamodb.BatchWriteItemRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.BatchWriteItemRequest)
	}

	return r0
}

// CreateBackupRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateBackupRequest(_a0 *dynamodb.CreateBackupInput) dynamodb.CreateBackupRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.CreateBackupRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateBackupInput) dynamodb.CreateBackupRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.CreateBackupRequest)
	}

	return r0
}

// CreateGlobalTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateGlobalTableRequest(_a0 *dynamodb.CreateGlobalTableInput) dynamodb.CreateGlobalTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.CreateGlobalTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateGlobalTableInput) dynamodb.CreateGlobalTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.CreateGlobalTableRequest)
	}

	return r0
}

// CreateTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) CreateTableRequest(_a0 *dynamodb.CreateTableInput) dynamodb.CreateTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.CreateTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateTableInput) dynamodb.CreateTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.CreateTableRequest)
	}

	return r0
}

// DeleteBackupRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DeleteBackupRequest(_a0 *dynamodb.DeleteBackupInput) dynamodb.DeleteBackupRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DeleteBackupRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteBackupInput) dynamodb.DeleteBackupRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DeleteBackupRequest)
	}

	return r0
}

// DeleteItemRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DeleteItemRequest(_a0 *dynamodb.DeleteItemInput) dynamodb.DeleteItemRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DeleteItemRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteItemInput) dynamodb.DeleteItemRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DeleteItemRequest)
	}

	return r0
}

// DeleteTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DeleteTableRequest(_a0 *dynamodb.DeleteTableInput) dynamodb.DeleteTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DeleteTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteTableInput) dynamodb.DeleteTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DeleteTableRequest)
	}

	return r0
}

// DescribeBackupRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeBackupRequest(_a0 *dynamodb.DescribeBackupInput) dynamodb.DescribeBackupRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeBackupRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeBackupInput) dynamodb.DescribeBackupRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeBackupRequest)
	}

	return r0
}

// DescribeContinuousBackupsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeContinuousBackupsRequest(_a0 *dynamodb.DescribeContinuousBackupsInput) dynamodb.DescribeContinuousBackupsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeContinuousBackupsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContinuousBackupsInput) dynamodb.DescribeContinuousBackupsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeContinuousBackupsRequest)
	}

	return r0
}

// DescribeContributorInsightsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeContributorInsightsRequest(_a0 *dynamodb.DescribeContributorInsightsInput) dynamodb.DescribeContributorInsightsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeContributorInsightsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContributorInsightsInput) dynamodb.DescribeContributorInsightsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeContributorInsightsRequest)
	}

	return r0
}

// DescribeEndpointsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeEndpointsRequest(_a0 *dynamodb.DescribeEndpointsInput) dynamodb.DescribeEndpointsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeEndpointsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeEndpointsInput) dynamodb.DescribeEndpointsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeEndpointsRequest)
	}

	return r0
}

// DescribeGlobalTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeGlobalTableRequest(_a0 *dynamodb.DescribeGlobalTableInput) dynamodb.DescribeGlobalTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeGlobalTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableInput) dynamodb.DescribeGlobalTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeGlobalTableRequest)
	}

	return r0
}

// DescribeGlobalTableSettingsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeGlobalTableSettingsRequest(_a0 *dynamodb.DescribeGlobalTableSettingsInput) dynamodb.DescribeGlobalTableSettingsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeGlobalTableSettingsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableSettingsInput) dynamodb.DescribeGlobalTableSettingsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeGlobalTableSettingsRequest)
	}

	return r0
}

// DescribeLimitsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeLimitsRequest(_a0 *dynamodb.DescribeLimitsInput) dynamodb.DescribeLimitsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeLimitsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeLimitsInput) dynamodb.DescribeLimitsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeLimitsRequest)
	}

	return r0
}

// DescribeTableReplicaAutoScalingRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeTableReplicaAutoScalingRequest(_a0 *dynamodb.DescribeTableReplicaAutoScalingInput) dynamodb.DescribeTableReplicaAutoScalingRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeTableReplicaAutoScalingRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) dynamodb.DescribeTableReplicaAutoScalingRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeTableReplicaAutoScalingRequest)
	}

	return r0
}

// DescribeTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeTableRequest(_a0 *dynamodb.DescribeTableInput) dynamodb.DescribeTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) dynamodb.DescribeTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeTableRequest)
	}

	return r0
}

// DescribeTimeToLiveRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) DescribeTimeToLiveRequest(_a0 *dynamodb.DescribeTimeToLiveInput) dynamodb.DescribeTimeToLiveRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.DescribeTimeToLiveRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTimeToLiveInput) dynamodb.DescribeTimeToLiveRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.DescribeTimeToLiveRequest)
	}

	return r0
}

// GetItemRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) GetItemRequest(_a0 *dynamodb.GetItemInput) dynamodb.GetItemRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.GetItemRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.GetItemInput) dynamodb.GetItemRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.GetItemRequest)
	}

	return r0
}

// ListBackupsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListBackupsRequest(_a0 *dynamodb.ListBackupsInput) dynamodb.ListBackupsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.ListBackupsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.ListBackupsInput) dynamodb.ListBackupsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.ListBackupsRequest)
	}

	return r0
}

// ListContributorInsightsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListContributorInsightsRequest(_a0 *dynamodb.ListContributorInsightsInput) dynamodb.ListContributorInsightsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.ListContributorInsightsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.ListContributorInsightsInput) dynamodb.ListContributorInsightsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.ListContributorInsightsRequest)
	}

	return r0
}

// ListGlobalTablesRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListGlobalTablesRequest(_a0 *dynamodb.ListGlobalTablesInput) dynamodb.ListGlobalTablesRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.ListGlobalTablesRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.ListGlobalTablesInput) dynamodb.ListGlobalTablesRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.ListGlobalTablesRequest)
	}

	return r0
}

// ListTablesRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListTablesRequest(_a0 *dynamodb.ListTablesInput) dynamodb.ListTablesRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.ListTablesRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTablesInput) dynamodb.ListTablesRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.ListTablesRequest)
	}

	return r0
}

// ListTagsOfResourceRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ListTagsOfResourceRequest(_a0 *dynamodb.ListTagsOfResourceInput) dynamodb.ListTagsOfResourceRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.ListTagsOfResourceRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTagsOfResourceInput) dynamodb.ListTagsOfResourceRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.ListTagsOfResourceRequest)
	}

	return r0
}

// PutItemRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) PutItemRequest(_a0 *dynamodb.PutItemInput) dynamodb.PutItemRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.PutItemRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.PutItemInput) dynamodb.PutItemRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.PutItemRequest)
	}

	return r0
}

// QueryRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) QueryRequest(_a0 *dynamodb.QueryInput) dynamodb.QueryRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.QueryRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) dynamodb.QueryRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.QueryRequest)
	}

	return r0
}

// RestoreTableFromBackupRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) RestoreTableFromBackupRequest(_a0 *dynamodb.RestoreTableFromBackupInput) dynamodb.RestoreTableFromBackupRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.RestoreTableFromBackupRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableFromBackupInput) dynamodb.RestoreTableFromBackupRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.RestoreTableFromBackupRequest)
	}

	return r0
}

// RestoreTableToPointInTimeRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) RestoreTableToPointInTimeRequest(_a0 *dynamodb.RestoreTableToPointInTimeInput) dynamodb.RestoreTableToPointInTimeRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.RestoreTableToPointInTimeRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableToPointInTimeInput) dynamodb.RestoreTableToPointInTimeRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.RestoreTableToPointInTimeRequest)
	}

	return r0
}

// ScanRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) ScanRequest(_a0 *dynamodb.ScanInput) dynamodb.ScanRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.ScanRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) dynamodb.ScanRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.ScanRequest)
	}

	return r0
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) TagResourceRequest(_a0 *dynamodb.TagResourceInput) dynamodb.TagResourceRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.TagResourceRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.TagResourceInput) dynamodb.TagResourceRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.TagResourceRequest)
	}

	return r0
}

// TransactGetItemsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) TransactGetItemsRequest(_a0 *dynamodb.TransactGetItemsInput) dynamodb.TransactGetItemsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.TransactGetItemsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactGetItemsInput) dynamodb.TransactGetItemsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.TransactGetItemsRequest)
	}

	return r0
}

// TransactWriteItemsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) TransactWriteItemsRequest(_a0 *dynamodb.TransactWriteItemsInput) dynamodb.TransactWriteItemsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.TransactWriteItemsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) dynamodb.TransactWriteItemsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.TransactWriteItemsRequest)
	}

	return r0
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UntagResourceRequest(_a0 *dynamodb.UntagResourceInput) dynamodb.UntagResourceRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UntagResourceRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UntagResourceInput) dynamodb.UntagResourceRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UntagResourceRequest)
	}

	return r0
}

// UpdateContinuousBackupsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateContinuousBackupsRequest(_a0 *dynamodb.UpdateContinuousBackupsInput) dynamodb.UpdateContinuousBackupsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateContinuousBackupsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContinuousBackupsInput) dynamodb.UpdateContinuousBackupsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateContinuousBackupsRequest)
	}

	return r0
}

// UpdateContributorInsightsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateContributorInsightsRequest(_a0 *dynamodb.UpdateContributorInsightsInput) dynamodb.UpdateContributorInsightsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateContributorInsightsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContributorInsightsInput) dynamodb.UpdateContributorInsightsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateContributorInsightsRequest)
	}

	return r0
}

// UpdateGlobalTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateGlobalTableRequest(_a0 *dynamodb.UpdateGlobalTableInput) dynamodb.UpdateGlobalTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateGlobalTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableInput) dynamodb.UpdateGlobalTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateGlobalTableRequest)
	}

	return r0
}

// UpdateGlobalTableSettingsRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateGlobalTableSettingsRequest(_a0 *dynamodb.UpdateGlobalTableSettingsInput) dynamodb.UpdateGlobalTableSettingsRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateGlobalTableSettingsRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableSettingsInput) dynamodb.UpdateGlobalTableSettingsRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateGlobalTableSettingsRequest)
	}

	return r0
}

// UpdateItemRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateItemRequest(_a0 *dynamodb.UpdateItemInput) dynamodb.UpdateItemRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateItemRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateItemInput) dynamodb.UpdateItemRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateItemRequest)
	}

	return r0
}

// UpdateTableReplicaAutoScalingRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateTableReplicaAutoScalingRequest(_a0 *dynamodb.UpdateTableReplicaAutoScalingInput) dynamodb.UpdateTableReplicaAutoScalingRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateTableReplicaAutoScalingRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) dynamodb.UpdateTableReplicaAutoScalingRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateTableReplicaAutoScalingRequest)
	}

	return r0
}

// UpdateTableRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateTableRequest(_a0 *dynamodb.UpdateTableInput) dynamodb.UpdateTableRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateTableRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableInput) dynamodb.UpdateTableRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateTableRequest)
	}

	return r0
}

// UpdateTimeToLiveRequest provides a mock function with given fields: _a0
func (_m *MockClientAPI) UpdateTimeToLiveRequest(_a0 *dynamodb.UpdateTimeToLiveInput) dynamodb.UpdateTimeToLiveRequest {
	ret := _m.Called(_a0)

	var r0 dynamodb.UpdateTimeToLiveRequest
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTimeToLiveInput) dynamodb.UpdateTimeToLiveRequest); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(dynamodb.UpdateTimeToLiveRequest)
	}

	return r0
}

// WaitUntilTableExists provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClientAPI) WaitUntilTableExists(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...aws.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableInput, ...aws.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTableNotExists provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockClientAPI) WaitUntilTableNotExists(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...aws.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableInput, ...aws.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
